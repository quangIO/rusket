/* automatically generated by rust-bindgen 0.59.2 */

pub const VERSION: &[u8; 8usize] = b"9.5.5.5\0";
pub const MACHINE_TYPE: &[u8; 7usize] = b"ta6osx\0";
pub type ptr = *mut ::std::os::raw::c_void;
pub type iptr = ::std::os::raw::c_long;
pub type uptr = ::std::os::raw::c_ulong;
pub type xptr = ptr;
pub type string_char = ::std::os::raw::c_uint;
pub type octet = ::std::os::raw::c_uchar;
extern "C" {
    pub fn Sinteger_value(arg1: ptr) -> iptr;
}
extern "C" {
    pub fn Sinteger32_value(arg1: ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sinteger64_value(arg1: ptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Sset_box(arg1: ptr, arg2: ptr);
}
extern "C" {
    pub fn Sset_car(arg1: ptr, arg2: ptr);
}
extern "C" {
    pub fn Sset_cdr(arg1: ptr, arg2: ptr);
}
extern "C" {
    pub fn Svector_set(arg1: ptr, arg2: iptr, arg3: ptr);
}
extern "C" {
    pub fn Scons(arg1: ptr, arg2: ptr) -> ptr;
}
extern "C" {
    pub fn Sstring_to_symbol(arg1: *const ::std::os::raw::c_char) -> ptr;
}
extern "C" {
    pub fn Ssymbol_to_string(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Sflonum(arg1: f64) -> ptr;
}
extern "C" {
    pub fn Smake_vector(arg1: iptr, arg2: ptr) -> ptr;
}
extern "C" {
    pub fn Smake_fxvector(arg1: iptr, arg2: ptr) -> ptr;
}
extern "C" {
    pub fn Smake_flvector(arg1: iptr, arg2: ptr) -> ptr;
}
extern "C" {
    pub fn Smake_bytevector(arg1: iptr, arg2: ::std::os::raw::c_int) -> ptr;
}
extern "C" {
    pub fn Smake_string(arg1: iptr, arg2: ::std::os::raw::c_int) -> ptr;
}
extern "C" {
    pub fn Smake_uninitialized_string(arg1: iptr) -> ptr;
}
extern "C" {
    pub fn Sstring(arg1: *const ::std::os::raw::c_char) -> ptr;
}
extern "C" {
    pub fn Sstring_of_length(arg1: *const ::std::os::raw::c_char, arg2: iptr) -> ptr;
}
extern "C" {
    pub fn Sstring_utf8(arg1: *const ::std::os::raw::c_char, arg2: iptr) -> ptr;
}
extern "C" {
    pub fn Sbox(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Sinteger(arg1: iptr) -> ptr;
}
extern "C" {
    pub fn Sunsigned(arg1: uptr) -> ptr;
}
extern "C" {
    pub fn Sinteger32(arg1: ::std::os::raw::c_int) -> ptr;
}
extern "C" {
    pub fn Sunsigned32(arg1: ::std::os::raw::c_uint) -> ptr;
}
extern "C" {
    pub fn Sinteger64(arg1: ::std::os::raw::c_long) -> ptr;
}
extern "C" {
    pub fn Sunsigned64(arg1: ::std::os::raw::c_ulong) -> ptr;
}
extern "C" {
    pub fn Srecord_type(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Srecord_type_parent(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Srecord_type_uniformp(arg1: ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srecord_type_size(arg1: ptr) -> uptr;
}
extern "C" {
    pub fn Stop_level_value(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Sset_top_level_value(arg1: ptr, arg2: ptr);
}
extern "C" {
    pub fn Slock_object(arg1: ptr);
}
extern "C" {
    pub fn Sunlock_object(arg1: ptr);
}
extern "C" {
    pub fn Slocked_objectp(arg1: ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sforeign_symbol(arg1: *const ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Sregister_symbol(arg1: *const ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Scall0(arg1: ptr) -> ptr;
}
extern "C" {
    pub fn Scall1(arg1: ptr, arg2: ptr) -> ptr;
}
extern "C" {
    pub fn Scall2(arg1: ptr, arg2: ptr, arg3: ptr) -> ptr;
}
extern "C" {
    pub fn Scall3(arg1: ptr, arg2: ptr, arg3: ptr, arg4: ptr) -> ptr;
}
extern "C" {
    pub fn Sinitframe(arg1: iptr);
}
extern "C" {
    pub fn Sput_arg(arg1: iptr, arg2: ptr);
}
extern "C" {
    pub fn Scall(arg1: ptr, arg2: iptr) -> ptr;
}
extern "C" {
    pub fn Skernel_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Sretain_static_relocation();
}
extern "C" {
    pub fn Sset_verbose(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Sscheme_init(arg1: ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn Sregister_boot_file(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Sregister_boot_direct_file(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Sregister_boot_file_fd(arg1: *const ::std::os::raw::c_char, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Sregister_boot_file_fd_region(
        arg1: *const ::std::os::raw::c_char,
        fd: ::std::os::raw::c_int,
        offset: iptr,
        len: iptr,
        close_after: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Sregister_heap_file(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Scompact_heap();
}
extern "C" {
    pub fn Ssave_heap(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Sbuild_heap(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn Senable_expeditor(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Sscheme_start(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sscheme_script(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sscheme_program(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sscheme_deinit();
}
extern "C" {
    pub fn Sscheme_register_signal_registerer(
        f: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn Sactivate_thread() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdeactivate_thread();
}
extern "C" {
    pub fn Sdestroy_thread() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct racket_boot_arguments_t {
    pub boot1_path: *const ::std::os::raw::c_char,
    pub boot1_offset: ::std::os::raw::c_long,
    pub boot1_len: ::std::os::raw::c_long,
    pub boot2_path: *const ::std::os::raw::c_char,
    pub boot2_offset: ::std::os::raw::c_long,
    pub boot2_len: ::std::os::raw::c_long,
    pub boot3_path: *const ::std::os::raw::c_char,
    pub boot3_offset: ::std::os::raw::c_long,
    pub boot3_len: ::std::os::raw::c_long,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub exec_file: *const ::std::os::raw::c_char,
    pub run_file: *const ::std::os::raw::c_char,
    pub collects_dir: *const ::std::os::raw::c_char,
    pub config_dir: *const ::std::os::raw::c_char,
    pub dll_dir: *mut ::std::os::raw::c_void,
    pub k_file: *const ::std::os::raw::c_char,
    pub cs_compiled_subdir: ::std::os::raw::c_int,
    pub segment_offset: ::std::os::raw::c_long,
    pub dll_open: *mut ::std::os::raw::c_void,
    pub dll_find_object: *mut ::std::os::raw::c_void,
    pub dll_close: *mut ::std::os::raw::c_void,
    pub exit_after: ::std::os::raw::c_int,
    pub is_gui: ::std::os::raw::c_int,
    pub wm_is_gracket_or_x11_arg_count: ::std::os::raw::c_int,
    pub gracket_guid_or_x11_args: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn racket_boot(boot_args: *mut racket_boot_arguments_t);
}
pub type racket_boot_t =
    ::std::option::Option<unsafe extern "C" fn(boot_args: *mut racket_boot_arguments_t)>;
extern "C" {
    pub fn racket_apply(proc_: ptr, arg_list: ptr) -> ptr;
}
extern "C" {
    pub fn racket_primitive(name: *const ::std::os::raw::c_char) -> ptr;
}
extern "C" {
    pub fn racket_eval(s_expr: ptr) -> ptr;
}
extern "C" {
    pub fn racket_dynamic_require(module_path: ptr, sym_or_false: ptr) -> ptr;
}
extern "C" {
    pub fn racket_namespace_require(module_path: ptr);
}
extern "C" {
    pub fn racket_embedded_load_bytes(
        code: *const ::std::os::raw::c_char,
        len: uptr,
        as_predefined: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn racket_embedded_load_file(
        path: *const ::std::os::raw::c_char,
        as_predefined: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn racket_embedded_load_file_region(
        path: *const ::std::os::raw::c_char,
        start: uptr,
        end: uptr,
        as_predefined: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn racket_cpointer_address(cptr: ptr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn racket_cpointer_base_address(cptr: ptr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn racket_cpointer_offset(cptr: ptr) -> iptr;
}
extern "C" {
    pub fn racket_easy_boot(
        exec_file: *const ::std::os::raw::c_char,
        boot1_path: *const ::std::os::raw::c_char,
        boot2_path: *const ::std::os::raw::c_char,
        boot3_path: *const ::std::os::raw::c_char,
        collects_dir: *const ::std::os::raw::c_char,
        config_dir: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn run_something(image: *const ::std::os::raw::c_char);
}
